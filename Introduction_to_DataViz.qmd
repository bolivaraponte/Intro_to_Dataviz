---
title: "Intro to Data Visualization in R"
author: "Bolívar Aponte Rolón"
date: today
date-format: long
format: 
  revealjs:
    footer: "Introduction to Data Visualization in R"
    code-copy: true
    code-link: true
    #df-print: kable
    slide-number: true
    chalkboard: true
    mouse-wheel: false
    theme: 
      - "custom.scss"
    logo: "TUL_Logos_narrow.png"
    margin: 0.03
    #cite-method: biblatex
editor: source
execute: 
  eval: true
  echo: true
editor_options: 
  chunk_output_type: console
bibliography: references_dataviz.bib
nocite: |
  @*
---

## Introduction to `ggplot2`

::: incremental
In this workshop we will:

-   Explore (briefly) the grammar of graphics

-   Understand layer components and map aesthetics

-   Create a layered plot
:::

::: callout-note
The first segment of this presentation is based on University of Arizona's [CALS-workshop series: Foundations of `ggplot2`](https://github.com/cct-datascience/CALS-workshops/tree/main/20230605-foundations-ggplot2)
:::

## Popular visualizations

```{r, pop_viz}
#| echo: false
library(palmerpenguins)
library(ggplot2)
library(dplyr)
library(ggpubr)

barplot <- ggplot(penguins, aes(x = species, y = bill_length_mm)) +
  geom_bar(stat = "identity", aes( fill = species), alpha = 0.7) +
  theme_classic(base_size = 16) +
theme(plot.title = element_text(color="black", size = 14, face="bold")) +
  labs(x="", title = "Bar plot")+
  scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575")) +
  guides(size = "none",
         fill = "none")


scatterp <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.8) +
  theme_classic(base_size = 16) +
  theme(plot.title = element_text(color="black", size = 14, face="bold")) +
    #xlab("")+
  labs(title = "Scatter plot") +
  scale_color_manual(values = c("#FF8100", "#C75BCB", "#057575"))
  # guides(size = "none",
  #        color = "none")

boxplot <- ggplot(penguins, aes(x = species, y = bill_length_mm,
                     fill = species)) +
  geom_boxplot(alpha = 0.8) +
  theme_classic(base_size = 16)+
  theme(plot.title = element_text(color="black", size = 14, face="bold")) +
    #xlab("")+
  labs(x="", title = "Box plot") +
  scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575")) +

  guides(size = "none",
          fill = "none")

violin <- ggplot(penguins, aes(x = species, y = bill_length_mm,
                     fill = species)) +
  geom_violin(alpha = 0.8) +
  geom_point(position = "jitter", alpha = 0.3) +
  geom_boxplot(alpha = 0.3, size = 0.5, width = 0.3) +
  theme_classic(base_size = 16)+
  theme(plot.title = element_text(color="black", size = 14, face="bold")) +
    #xlab("")+
  labs(x="", title = "Violin plot") +
  scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575")) +

  guides(size = "none",
          fill = "none")
```

```{r, grid, echo=FALSE}
arranged <- ggarrange(barplot, scatterp, boxplot, violin, nrow = 2, ncol=2, common.legend = TRUE, legend="right")
arranged
```

## Philosophy behind `ggplot2`

Creating a plot is like forming a well-structured sentence with *subject* a *predicate* and an *object*.

::: incremental
-   reveal composition of complicated graphics

-   strong foundation for understanding a range of graphics

-   guide for well-formed or correct graphics
:::

::: callout-note
See ["The Grammar of Graphics"](https://link.springer.com/book/10.1007/0-387-28695-0) by Leland Wilkinson (2005) and ["A Layered Grammar of Graphics"](https://vita.had.co.nz/papers/layered-grammar.html) by Hadley Wickham (2010)
:::

## Layered grammar of graphics {.smaller}

::: columns
::: {.column width="40%"}
```{r}
#| warning: false
#| echo: false
#| fig-width: 5
#| fig-height: 5

library(palmerpenguins)
library(ggplot2)
library(dplyr)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, 
                     size = body_mass_g,
                     color = species)) +
  geom_point(alpha = 0.5) +
  theme_classic(base_size = 16) +
  scale_color_manual(values = c("#FF8100", "#C75BCB", "#057575")) +
  guides(size = "none",
         color = "none")
```
:::

::: {.column width="60%"}
`ggplot2` builds complex plots one layer at a time.

We can easily change the meaning of the "sentence" by adding or removing parts.

::: incremental
-   What are the necessary components of a plot?

-   What are necessary components of a layer?
:::
:::
:::

## Components of a plot {.smaller}

::: columns
::: {.column width="30%"}
```{r}
#| warning: false
#| echo: false
#| fig-width: 5
#| fig-height: 5

library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, 
                     size = body_mass_g,
                     color = species)) +
  geom_point(alpha = 0.5) +
  theme_classic(base_size = 16) +
  scale_color_manual(values = c("#FF8100", "#C75BCB", "#057575")) +
  guides(size = "none",
         color = "none")
```
:::

::: {.column width="70%"}
A plot contains:

::: incremental
-   **Data** we want to plot

    -   *Continuous* or *discrete*

-   **Mapping**: What part of the data we are mapping?

-   **Geometry**: Points? lines?

-   **Scales** (or transformations): Linearly? Logarithmically?

-   **Coordinate system**: Cartesian , polar...

-   Faceting and themes
:::
:::
:::

## Components of a layer

::: columns
::: {.column width="30%"}
```{r}
#| warning: false
#| echo: false
#| fig-width: 5
#| fig-height: 5

library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, 
                     size = body_mass_g,
                     color = species)) +
  geom_point(alpha = 0.5) +
  theme_classic(base_size = 16) +
  scale_color_manual(values = c("#FF8100", "#C75BCB", "#057575")) +
  guides(size = "none",
         color = "none")
```
:::

::: {.column width="70%"}
A layer contains:

::: incremental
-   Data with aesthetic mapping

-   A statistical transformation, or *stat*

-   A geometric object, or *geom*

-   A position adjustment
:::
:::
:::

## Mapping data to aesthetics {.smaller}

### What inputs are needed?

Input data must be a data frame in 'tidy' format:

::: incremental
-   every column is a variable

-   every row is an observation

-   every cell is a single value
:::

::: callout-note
See ["Tidy Data"](https://vita.had.co.nz/papers/tidy-data.html) by Wickham (2014) and the associated [vignette](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)
:::

## Example dataset - raw

```{r}
#| out.width: "70%"
#| echo: false
#| fig.align: "center"
example <- penguins[c(1:2, 160:161, 283:284), c(1, 3:4, 6)]
example
```

## Example dataset - mapped

::: columns
::: {.column width="40%"}
```{r}
#| warning: false
#| echo: false
#| fig-width: 4
#| fig-height: 4
library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, 
                     size = body_mass_g,
                     color = species)) +
  geom_point(alpha = 0.5) +
  theme_classic(base_size = 16) +
  scale_color_manual(values = c("#FF8100", "#C75BCB", "#057575")) +
  guides(size = "none",
         color = "none")
```

```{r}
#| warning: false
#| eval: false
aes(x = bill_length_mm,
    y = bill_depth_mm,
    size = body_mass_g,
    color = species)
```
:::

::: {.column width="60%"}
Variables mapped to aesthetic:

```{r}
#| echo: false
library(dplyr)
example <- penguins[c(1:2, 160:161, 283:284), c(1, 3:4, 6)]
example %>%
  rename(x = bill_length_mm,
         y = bill_depth_mm,
         Size = body_mass_g,
         Color = species)
```
:::
:::

## Where to specify aesthetics? {.smaller}

::: incremental
-   Can be supplied to initial `ggplot()` call, in individual layers, or a combo

-   `ggplot()` data and aesthetics are *inherited*, but can be *overridden*

```{r}
#| eval: false
#| echo: true
ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm,
                     color = species)) +
  geom_point()
```

```{r}
#| eval: false
#| echo: true
ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm)) +
  geom_point(aes(color = species))
```

```{r}
#| eval: false
#| echo: true
ggplot() +
  geom_point(data = penguins, 
             aes(x = body_mass_g, y = flipper_length_mm, color = species))
```
:::

# Let's explore some visualizations

## Download

-   `ggplot2`

-   `palmerpenguins`

-   `tidyverse` (includes `dplyr`)

::: callout-tip
How to install? Use command `install.packages()`
:::

## Bar Plots

::: columns
::: {.column width="50%"}
```{r, bar plots}
#| eval: false
#| echo: true
#| fig-width: 5
#| fig-height: 5

library(palmerpenguins)
library(ggplot2)
library(dplyr)

ggplot(penguins, aes(x = species, y = bill_length_mm)) +
  geom_bar(stat = "identity", aes( fill = species), alpha = 0.7) +
  theme_classic(base_size = 16) +
  theme(plot.title = element_text(color="black",
                                  size = 14,
                                  face="bold")) +
  labs(x="", title = "Bar plot")+
  scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575")) +
  guides(size = "none",
         fill = "none")
```
:::

::: {.column width="50%"}
```{r, bar plots2}
#| eval: true
#| echo: false
#| fig-width: 5
#| fig-height: 5

ggplot(penguins, aes(x = species, y = bill_length_mm)) +
  geom_bar(stat = "identity", aes( fill = species), alpha = 0.7) +
  theme_classic(base_size = 16) +
  theme(plot.title = element_text(color="black",
                                  size = 14,
                                  face="bold")) +
  labs(x="", title = "Bar plot")+
  scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575")) +
  guides(size = "none",
         fill = "none")
```
:::
:::

## Bar Plots

::: incremental
-   How would we flip the axes and have a horizontal plot?
:::

## Bar Plots

Use `coord_flip()` to flip *x* and *y* axes.

::: columns
::: {.column width="50%"}
```{r, coord_flip bar plots}
#| eval: false
#| echo: true
#| fig-width: 5
#| fig-height: 5

library(palmerpenguins)
library(ggplot2)
library(dplyr)

ggplot(penguins, aes(x = species, y = bill_length_mm)) +
  geom_bar(stat = "identity", aes( fill = species), alpha = 0.7) +
  theme_classic(base_size = 16) +
  theme(plot.title = element_text(color="black",
                                  size = 14,
                                  face="bold")) +
  labs(x="", title = "Bar plot")+
  scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575")) +
  coord_flip() +
  guides(size = "none",
         fill = "none")
```
:::

::: {.column width="50%"}
```{r, coord_flip bar plots2}
#| eval: true
#| echo: false
#| fig-width: 5
#| fig-height: 5

ggplot(penguins, aes(x = species, y = bill_length_mm)) +
  geom_bar(stat = "identity", aes( fill = species), alpha = 0.7) +
  theme_classic(base_size = 16) +
  theme(plot.title = element_text(color="black",
                                  size = 14,
                                  face="bold")) +
  labs(x="", title = "Bar plot")+
  scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575")) +
  coord_flip() +
  guides(size = "none",
         fill = "none")
```
:::
:::

## Box Plots

::: columns
::: {.column width="50%"}
```{r, box plots}
#| eval: false
#| echo: true
#| fig-width: 5
#| fig-height: 5

library(palmerpenguins)
library(ggplot2)
library(dplyr)

ggplot(penguins, aes(x = species, y = bill_length_mm,
                     fill = species)) +
  geom_boxplot(alpha = 0.8) +
  theme_classic(base_size = 16)+
  theme(plot.title = element_text(color="black", size = 14, face="bold")) +
    #xlab("")+
  labs(x="", title = "Box plot") +
  scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575")) +

  guides(size = "none",
          fill = "none")
```
:::

::: {.column width="50%"}
```{r, box plots2}
#| eval: true
#| echo: false
#| fig-width: 5
#| fig-height: 5


ggplot(penguins, aes(x = species, y = bill_length_mm,
                     fill = species)) +
  geom_boxplot(alpha = 0.8) +
  theme_classic(base_size = 16)+
  theme(plot.title = element_text(color="black", size = 14, face="bold")) +
    #xlab("")+
  labs(x="", title = "Box plot") +
  scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575")) +

  guides(size = "none",
          fill = "none")
```
:::
:::

## Scatter Plots

```{r, scatter_plots}
#| warning: false
#| echo: false
#| fig-width: 5
#| fig-height: 5
library(palmerpenguins)
library(ggplot2)
library(dplyr)
library(ggpubr)

# Scatter_a

scatter_a <- ggplot(penguins, aes(x = bill_length_mm, y = flipper_length_mm, 
                     size = body_mass_g,
                     color = species)) +
  geom_point(alpha = 0.5) +
  theme_classic(base_size = 16) +
  theme(plot.title = element_text(color="black", size = 14, face="bold"),
        legend.position = "right") +
    #xlab("")+
  labs(title = "a") +
  scale_color_manual(values = c("#FF8100", "#C75BCB", "#057575"))
  #guides(size = "none",
   #      color = "none")


# Scatter_b

scatter_b <- ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm,
                     color = species)) +
  geom_point(alpha = 0.8, size= 3) +
  geom_smooth(method = "lm", se = TRUE, color = "grey20", linewidth = 1.25) +
  theme_classic(base_size = 16) +
  theme(plot.title = element_text(color="black", size = 14, face="bold"),
        legend.position = "right") +
    #xlab("")+
  labs(title = "b") +
  scale_color_manual(values = c("#FF8100", "#C75BCB", "#057575")) +
  guides(size = "none",
          color = "none")

```

```{r, scatter_arr}
#| echo: false
scatter_arr <- ggarrange(scatter_a, scatter_b, nrow = 1, ncol=2, common.legend = TRUE, legend="right")
scatter_arr
```

## Histograms

::: columns
::: {.column width="50%"}
```{r, histograms}
#| eval: false
#| echo: true
#| fig.width: 5
#| fig.height: 5

ggplot(penguins, aes(x = bill_length_mm, fill = species)) +
  geom_histogram(binwidth = 1, color = "black", alpha = 0.8) +
  theme_classic(base_size = 16) +
  theme(plot.title = element_text(color="black", size = 14, face="bold"),
        legend.position = "right") +
    #xlab("")+
  scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575"))
```
:::

::: {.column width="50%"}
```{r, histograms2}
#| eval: true
#| echo: false
#| fig.width: 5
#| fig.height: 5

ggplot(penguins, aes(x = bill_length_mm, fill = species)) +
  geom_histogram(binwidth = 1, color = "black", alpha = 0.8) +
  theme_classic(base_size = 16) +
  theme(plot.title = element_text(color="black", size = 14, face="bold"),
        legend.position = "right") +
    #xlab("")+
  scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575"))
```
:::
:::

## Density Plots

::: columns
::: {.column width="50%"}
```{r, density plots}
#| eval: false
#| echo: true
#| fig.width: 5
#| fig.height: 5
ggplot(penguins, aes(x = bill_length_mm, fill = species)) +
  geom_density(binwidth = 1, color = "grey30", alpha = 0.7) +
  theme_classic(base_size = 16) +
  theme(plot.title = element_text(color="black", size = 14, face="bold"),
        legend.position = "right") +
    #xlab("")+
  scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575"))
```
:::

::: {.column width="50%"}
```{r, density plots2}
#| eval: true
#| echo: false
#| fig.width: 5
#| fig.height: 5
ggplot(penguins, aes(x = bill_length_mm, fill = species)) +
  geom_density(binwidth = 1, color = "grey30", alpha = 0.7) +
  theme_classic(base_size = 16) +
  theme(plot.title = element_text(color="black", size = 14, face="bold"),
        legend.position = "right") +
    #xlab("")+
  scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575"))
```
:::
:::

# Code-along exercise

## Recreating a layered plot

```{r, recreate}
#| echo: false
#| eval: true
#| fig-width: 7
#| fig-height: 5
#| fig-align: center
library(multcompView)
library(tidyverse)

ggplot(na.omit(penguins), 
       aes(x = species, y = flipper_length_mm,
                              fill = sex)) +
  geom_violin() +
  geom_point(position = position_jitterdodge(dodge.width = 0.9, jitter.width = 0.3),
             alpha = 0.3, color = "grey30") +
  geom_crossbar(stat="summary", 
               fun = mean, 
               fun.max = mean, 
               fun.min = mean,
               alpha = 0.3, 
               size = 0.3, 
               width = 0.7,
               position = position_dodge(width = 0.9)) +

  theme_classic(base_size = 16)+
  theme(plot.title = element_text(color="black", size = 14, face="bold")) +
  scale_fill_manual(values = c("#FF8100", "#C75BCB")) 

```

## Recreating a layered plot

```{r recreate2}
#| echo: true
#| eval: false
#| fig-width: 6
#| fig-height: 6
#| fig-align: center

ggplot(na.omit(penguins), 
       aes(x = species, y = flipper_length_mm,
                              fill = sex)) +
  geom_violin() +
  geom_point(position = position_jitterdodge(dodge.width = 0.9, jitter.width = 0.3),
             alpha = 0.3, color = "grey30") +
  geom_crossbar(stat="summary", 
               fun = mean, 
               fun.max = mean, 
               fun.min = mean,
               alpha = 0.3, 
               size = 0.3, 
               width = 0.7,
               position = position_dodge(width = 0.9)) +

  theme_classic(base_size = 16)+
  theme(plot.title = element_text(color="black", size = 14, face="bold")) +
  scale_fill_manual(values = c("#FF8100", "#C75BCB")) +
  scale_y_continuous(breaks = seq(170, 240, 20))

```

# Facetting and Scales

## Facets {.smaller}

We can split the data into one or more variables using the `facet_wrap()` and `facet_grid()` function.

::: notes
This function takes a formula as an argument, and the formula is made up of the variables that you want to split the data by.
:::

```{r, facetwrap}
#| warning: false 
#| echo: false
#| fig.align: center
ggplot(na.omit(penguins), aes(x = sex, fill = sex)) +
  geom_bar(aes(fill = sex), alpha = 0.8) +
  theme_classic(base_size = 16) + 
  theme(plot.title = element_text(color="black",
                                  size = 14,
                                  face="bold"), legend.position =
          "right") + 
  xlab("")+ 
scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575")) + 
                    facet_wrap(~island) +
  guides(fill ="none")
```

## Scales {.smaller}

We can change the scales of the axes using the `scale_` functions, as well as colors sizes and shapes.

Changes can be aesthetically or statistical transformations (e.g. `scale_x_log10()`)

-   *fill*: Color filling an object (e.g. bars)

-   *color*: color of the border of an object (e.g. boxes of a boxplot)

-   *size*: size of a point or shape

-   *shape*: shape of a point

-   *alpha*: transparency of an object

## Scales {.smaller}

::: columns
::: {.column width="50%"}
```{r, scales}
#| echo: true
#| eval: false
#| fig-width: 6
#| fig-height: 6
#| fig-align: center

ggplot(na.omit(penguins), 
       aes(x = species, y = flipper_length_mm,
                              fill = sex)) +
  geom_violin() +
  geom_point(position = position_jitterdodge(dodge.width = 0.9, jitter.width = 0.3),
             alpha = 0.3, color = "grey30") +
  geom_crossbar(stat="summary", 
               fun = mean, 
               fun.max = mean, 
               fun.min = mean,
               alpha = 0.3, 
               size = 0.3, 
               width = 0.7,
               position = position_dodge(width = 0.9)) +

  theme_classic(base_size = 16)+
  theme(plot.title = element_text(color="black", size = 14, face="bold")) +
  scale_fill_manual(values = c("#FF8100", "#C75BCB")) +
  scale_y_continuous(breaks = seq(170, 240, 20))

```
:::

::: {.column width="50%"}
```{r, scales2}
#| echo: false
#| eval: true
#| fig-width: 6
#| fig-height: 5
#| fig-align: center

ggplot(na.omit(penguins), 
       aes(x = species, y = flipper_length_mm,
                              fill = sex)) +
  geom_violin() +
  geom_point(position = position_jitterdodge(dodge.width = 0.9, jitter.width = 0.3),
             alpha = 0.3, color = "grey30") +
  geom_crossbar(stat="summary", 
               fun = mean, 
               fun.max = mean, 
               fun.min = mean,
               alpha = 0.3, 
               size = 0.3, 
               width = 0.7,
               position = position_dodge(width = 0.9)) +

  theme_classic(base_size = 16)+
  theme(plot.title = element_text(color="black", size = 14, face="bold")) +
  scale_fill_manual(values = c("#FF8100", "#C75BCB")) +
  scale_y_continuous(breaks = seq(170, 240, 20))

```
:::
:::

# Saving your progress

## Saving plots {.smaller}

Use the function `ggsave()` to save your plot to a file.

```{r, saveplot}
#| eval: false
#| echo: true

ggsave(filename = "./myfolder/myplot.png", plot = p, width = 180mm, height = 180mm, dpi = 300)
```

You can save in a variety of formats:

-   PNG

-   SVG

-   PDF

-   JPEG

You can control the resolution and dimensions of the save plot.

## Saving plots {.smaller}

You can also save plots using the "Export" button in the "Plots" tab of RStudio.

![export](./Introduction_to_DataViz_files/figure-revealjs/screenshot.png){width="60%"}

## Resources for data visualization {.smaller}


::: {#refs}
:::
