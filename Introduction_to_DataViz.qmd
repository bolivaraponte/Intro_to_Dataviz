---
title: "Intro to Data Visualization in R"
author: "Bolívar Aponte Rolón"
format: 
  revealjs:
    #footer: "Introduction to Data Visualization in R"
    code-copy: true
    code-link: true
    #df-print: kable
    slide-number: true
    chalkboard: true
    mouse-wheel: false
    theme: 
      - "custom.scss"
    #logo: "TUL_Logos_narrow.png"
    #height: 1080
    #width: 1920
editor: visual
execute: 
  eval: true
  echo: true
editor_options: 
  chunk_output_type: console
---

## Introduction to `ggplot2`

::: incremental
In this workshop we will:

-   Explore (briefly) the grammar of graphics

-   Understand layer components and map aesthetics

-   Create a layered plot
:::

::: callout-note
The first segment of this presentation is based on University of Arizona's [CALS-workshop series: Foundations of `ggplot2`](https://github.com/cct-datascience/CALS-workshops/tree/main/20230605-foundations-ggplot2)
:::

## Popular visualizations

```{r, barplot}
#| echo: false




library(palmerpenguins)
library(ggplot2)
library(dplyr)
library(ggpubr)

barplot <- ggplot(penguins, aes(x = species, y = bill_length_mm)) +
  geom_bar(stat = "identity", aes( fill = species), alpha = 0.7) +
  theme_classic(base_size = 16) +
theme(plot.title = element_text(color="black", size = 14, face="bold")) +
  labs(x="", title = "Bar plot")+
  scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575")) +
  guides(size = "none",
         fill = "none")


scatterp <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.8) +
  theme_classic(base_size = 16) +
  theme(plot.title = element_text(color="black", size = 14, face="bold")) +
    #xlab("")+
  labs(, title = "Scatter plot") +
  scale_color_manual(values = c("#FF8100", "#C75BCB", "#057575"))
  # guides(size = "none",
  #        color = "none")

boxplot <- ggplot(penguins, aes(x = species, y = bill_length_mm,
                     fill = species)) +
  geom_boxplot(alpha = 0.8) +
  theme_classic(base_size = 16)+
  theme(plot.title = element_text(color="black", size = 14, face="bold")) +
    #xlab("")+
  labs(x="", title = "Box plot") +
  scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575")) +

  guides(size = "none",
          fill = "none")

violin <- ggplot(penguins, aes(x = species, y = bill_length_mm,
                     fill = species)) +
  geom_violin(alpha = 0.8) +
  geom_point(position = "jitter", alpha = 0.3) +
  geom_boxplot(alpha = 0.3, size = 0.5, width = 0.3) +
  theme_classic(base_size = 16)+
  theme(plot.title = element_text(color="black", size = 14, face="bold")) +
    #xlab("")+
  labs(x="", title = "Violin plot") +
  scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575")) +

  guides(size = "none",
          fill = "none")
```

```{r, grid, echo=FALSE}
arranged <- ggarrange(barplot, scatterp, boxplot, violin, nrow = 2, ncol=2, common.legend = TRUE, legend="right")
arranged
```

## Philosophy behind `ggplot2`

Creating a plot is like forming a well-structured sentence with "subject a predicate and an object".

::: incremental
-   reveal composition of complicated graphics

-   strong foundation for understanding a range of graphics

-   guide for well-formed or correct graphics
:::

::: callout-note
See ["The Grammar of Graphics"](https://link.springer.com/book/10.1007/0-387-28695-0) by Leland Wilkinson (2005) and ["A Layered Grammar of Graphics"](https://vita.had.co.nz/papers/layered-grammar.html) by Hadley Wickham (2010)
:::

## Layered grammar of graphics

::: columns
::: {.column width="40%"}
```{r}
#| warning: false
#| echo: false
#| fig-width: 5
#| fig-height: 5

library(palmerpenguins)
library(ggplot2)
library(dplyr)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, 
                     size = body_mass_g,
                     color = species)) +
  geom_point(alpha = 0.5) +
  theme_classic(base_size = 16) +
  scale_color_manual(values = c("#FF8100", "#C75BCB", "#057575")) +
  guides(size = "none",
         color = "none")
```
:::

::: {.column width="60%"}
`ggplot2` builds complex plots one layer at a time.

We can easily change the meaning of the "sentence" by adding or removing parts.

::: incremental
-   What are the necessary components of a plot?

-   What are necessary components of a layer?
:::
:::
:::

## Components of a plot

::: columns
::: {.column width="40%"}
```{r}
#| warning: false
#| echo: false
#| fig-width: 5
#| fig-height: 5

library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, 
                     size = body_mass_g,
                     color = species)) +
  geom_point(alpha = 0.5) +
  theme_classic(base_size = 16) +
  scale_color_manual(values = c("#FF8100", "#C75BCB", "#057575")) +
  guides(size = "none",
         color = "none")
```
:::

::: {.column width="60%"}
A plot contains:

::: incremental
-   **Data**: data we want to plot

-   *Continuous* or *discrete* variables

-   **Mapping**: What part of the data we are mapping?

-   **Geometry**: Points? lines?

-   **Scales** (or transformations): Linearly? Logarithmically?

-   **Coordinate system**: Cartesian , polar...

-   Faceting and themes
:::
:::
:::

## Components of a layer

::: columns
::: {.column width="40%"}
```{r}
#| warning: false
#| echo: false
#| fig-width: 5
#| fig-height: 5

library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, 
                     size = body_mass_g,
                     color = species)) +
  geom_point(alpha = 0.5) +
  theme_classic(base_size = 16) +
  scale_color_manual(values = c("#FF8100", "#C75BCB", "#057575")) +
  guides(size = "none",
         color = "none")
```
:::

::: {.column width="60%"}
A layer contains:

::: incremental
-   Data with aesthetic mapping

-   A statistical transformation, or *stat*

-   A geometric object, or *geom*

-   A position adjustment
:::
:::
:::

## Mapping data to aesthetics

### What inputs are needed?

Input data must be a data frame in 'tidy' format:

::: incremental
-   every column is a variable

-   every row is an observation

-   every cell is a single value
:::

::: callout-note
See ["Tidy Data"](https://vita.had.co.nz/papers/tidy-data.html) by Wickham (2014) and the associated [vignette](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)
:::

## Example dataset - raw

```{r out.width ='70%'}
#| echo: false
example <- penguins[c(1:2, 160:161, 283:284), c(1, 3:4, 6)]
example
```

## Example dataset - mapped

::: columns
::: {.column width="40%"}
```{r}
#| warning: false
#| echo: false
#| fig-width: 4
#| fig-height: 4
library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, 
                     size = body_mass_g,
                     color = species)) +
  geom_point(alpha = 0.5) +
  theme_classic(base_size = 16) +
  scale_color_manual(values = c("#FF8100", "#C75BCB", "#057575")) +
  guides(size = "none",
         color = "none")
```

```{r}
#| warning: false
#| eval: false
aes(x = bill_length_mm,
    y = bill_depth_mm,
    size = body_mass_g,
    color = species)
```
:::

::: {.column width="60%"}
Variables mapped to aesthetic:

```{r}
#| echo: false
library(dplyr)
example <- penguins[c(1:2, 160:161, 283:284), c(1, 3:4, 6)]
example %>%
  rename(x = bill_length_mm,
         y = bill_depth_mm,
         Size = body_mass_g,
         Color = species)
```
:::
:::

## Where to specify aesthetics?

::: incremental
-   Can be supplied to initial `ggplot()` call, in individual layers, or a combo

-   `ggplot()` data and aesthetics are inherited, but can be overridden
:::

```{r}
#| eval: false
#| echo: false

ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, 
                     color = species)) +
  geom_point()
```

```{r}
#| eval: false
#| echo: false
ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm)) +
  geom_point(aes(color = species))
```

```{r}
#| eval: false
#| echo: false
ggplot() +
  geom_point(data = penguins,
             aes(x = body_mass_g, y = flipper_length_mm, color = species))
```

# Let's explore some visualizations

## Download

-   `ggplot2`

-   `palmerpenguins`

-   `tidyverse` (includes `dplyr`)

::: callout-tip
How to install? Use command `install.packages()`
:::

## Bar Plots

::: columns
::: {.column width="40%"}
```{r}
#| echo: false
example <- penguins[c(1:2, 160:161, 283:284), c(1, 3:4, 6)]
example
```
:::

::: {.column width="60%"}
```{r}
#| echo: true

library(palmerpenguins)
library(ggplot2)
library(dplyr)
library(ggpubr)

ggplot(penguins, aes(x = species, y = bill_length_mm)) +
  geom_bar(stat = "identity", aes( fill = species), alpha = 0.7) +
  theme_classic(base_size = 16) +
theme(plot.title = element_text(color="black", size = 14, face="bold")) +
  labs(x="", title = "Bar plot")+
  scale_fill_manual(values = c("#FF8100", "#C75BCB", "#057575")) +
  guides(size = "none",
         fill = "none")
```
:::
:::

## Box Plots

## Scatter Plots

## Histograms

## 
